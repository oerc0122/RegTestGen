import dlpoly
from RegTestGen.params.test_param import TestParam
from RegTestGen.params.float_param import ArrayFloat, VectorFloat


def StatisReadWrap(statis_filename):
    a = dlpoly.statis.Statis()
    a.read(statis_filename)
    return a.data


class StatisFileParam(TestParam):
    """ STATIS file input """
    def __init__(self, *args, **kwargs):
        TestParam.__init__(self, *args, **kwargs)

    def gen(self, type, length=None, *args, **kwargs):
        if len(length) != 2:
            raise ValueError('')

        data = ArrayFloat()
        data.gen(type, length, *args, **kwargs)
        steps = VectorFloat()
        steps.gen(length=length[0], **self.get_prefix_args(kwargs, 'step', type='seq', start=1))
        times = VectorFloat()
        times.gen(length=length[0], **self.get_prefix_args(kwargs, 'time', type='seq'))

        self._value = self._gen_statis(data.value, stepstamps=steps.value, timestamps=times.value, **kwargs)

    @staticmethod
    def _gen_statis(data, file='tmpfile', title=None, stepstamps=None, timestamps=None, *args, **kwargs):
        # Dump data in STATIS format
        if title is None:
            title = "Testfile autogenerated by RegTestGen"
        if stepstamps is None:
            stepstamps = [i for i in range(len(data))]
        if timestamps is None:
            timestamps = [float(i) for i in stepstamps]

        if len(timestamps) != len(stepstamps) != len(data):
            raise ValueError('Bad lengths in generation of fake dlpoly-data')

        with open(file, 'w') as outFile:
            print("title:", title, file=outFile)
            print("energy units: kcal/mol", file=outFile)
            for i, line in enumerate(data):
                print("{:10d}{:14.6E}{:10d}".format(int(stepstamps[i]), timestamps[i], len(line)), file=outFile)
                for j in range(0, len(line), 5):
                    q = min(5, len(line)-j)
                    print(("{:14.6E}"*q).format(*line[j:j+q]), file=outFile)

        return file
